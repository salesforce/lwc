{
    "root": true,

    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "project": true
    },

    "plugins": ["jest", "@lwc/lwc-internal", "@typescript-eslint", "import", "header"],
    "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended-type-checked"],

    "env": {
        "es6": true
    },

    "reportUnusedDisableDirectives": true,
    "rules": {
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
        "block-scoped-var": "error",
        "no-alert": "error",
        "no-buffer-constructor": "error",
        "no-console": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-iterator": "error",
        "no-lone-blocks": "error",
        "no-proto": "error",
        "no-new-require": "error",
        "no-restricted-properties": [
            "error",
            {
                "object": "arguments",
                "property": "callee",
                "message": "arguments.callee is deprecated"
            },
            {
                "object": "global",
                "property": "isFinite",
                "message": "Please use Number.isFinite instead"
            },
            {
                "object": "self",
                "property": "isFinite",
                "message": "Please use Number.isFinite instead"
            },
            {
                "object": "window",
                "property": "isFinite",
                "message": "Please use Number.isFinite instead"
            },
            {
                "object": "global",
                "property": "isNaN",
                "message": "Please use Number.isNaN instead"
            },
            {
                "object": "self",
                "property": "isNaN",
                "message": "Please use Number.isNaN instead"
            },
            {
                "object": "window",
                "property": "isNaN",
                "message": "Please use Number.isNaN instead"
            },
            {
                "property": "__defineGetter__",
                "message": "Please use Object.defineProperty instead."
            },
            {
                "property": "__defineSetter__",
                "message": "Please use Object.defineProperty instead."
            },
            {
                "object": "Math",
                "property": "pow",
                "message": "Use the exponentiation operator (**) instead."
            },
            {
                "object": "globalThis",
                "property": "lwcRuntimeFlags",
                "message": "Use the bare global lwcRuntimeFlags instead."
            }
        ],
        "no-self-compare": "error",
        "no-undef-init": "error",
        "no-useless-computed-key": "error",
        "no-useless-return": "error",
        "prefer-const": [
            "error",
            {
                "destructuring": "any",
                "ignoreReadBeforeAssign": true
            }
        ],
        "template-curly-spacing": "error",
        "yoda": "error",

        "@lwc/lwc-internal/no-invalid-todo": "error",
        "import/order": [
            "error",
            {
                "groups": [
                    "builtin",
                    "external",
                    "internal",
                    "parent",
                    "index",
                    "sibling",
                    "object",
                    "type"
                ]
            }
        ],
        "no-restricted-imports": [
            "error",
            {
                "name": "@lwc/features",
                "importNames": ["lwcRuntimeFlags", "runtimeFlags", "default"],
                "message": "Do not directly import runtime flags from @lwc/features. Use the global lwcRuntimeFlags variable instead."
            }
        ],
        "header/header": [
            2,
            "block",
            [
                "",
                {
                    "pattern": "^ \\* Copyright \\(c\\) \\d{4}, ([sS]alesforce.com, inc|Salesforce, Inc)\\.$",
                    // This copyright text should match the text used in the rollup config
                    "template": " * Copyright (c) 2024, Salesforce, Inc."
                },
                " * All rights reserved.",
                " * SPDX-License-Identifier: MIT",
                " * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT",
                " "
            ]
        ],
        /*
         * TODO: Address violations and re-enable these rules
         */
        // Enums are a pain to deal with...
        "@typescript-eslint/no-unsafe-enum-comparison": "off",
        // We might just want to leave this one disabled
        "@typescript-eslint/unbound-method": "off",
        // We use objects in template strings (e.g. `${vm}`) a lot - that's not that helpful for
        // the user because it all just becomes "[object Object]"
        "@typescript-eslint/no-base-to-string": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        // The following all derive from our liberal use of `any`
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-redundant-type-constituents": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-argument": "off",
        // This rule returns false positives with ! assertions, even with strictNullChecks(https://github.com/typescript-eslint/typescript-eslint/issues/1618) on it was complaining
        "@typescript-eslint/no-unnecessary-type-assertion": "off"
    },

    "overrides": [
        {
            "files": [
                "**/__tests__/**",
                "packages/@lwc/*/scripts/**",
                // Just a weird edge case of a file...
                "packages/@lwc/synthetic-shadow/index.js"
            ],
            "parserOptions": {
                "project": "./tsconfig.eslint.json"
            }
        },
        {
            // Not covered by any tsconfig, so typed rules won't work, but we don't need them anyway
            "files": ["jest.config.js"],
            "extends": ["plugin:@typescript-eslint/disable-type-checked"]
        },
        {
            // Some tooling still uses require...
            "files": [
                "**/scripts/**",
                "jest.config.js",
                "packages/@lwc/integration-tests/src/components/**/*.spec.js"
            ],
            "rules": {
                "@typescript-eslint/no-var-requires": "off"
            }
        },
        {
            "files": ["packages/lwc/**"],
            "rules": {
                "no-restricted-imports": "off"
            }
        },
        {
            "files": [
                "packages/@lwc/engine-core/**",
                "packages/@lwc/engine-dom/**",
                "packages/@lwc/synthetic-shadow/**"
            ],
            "rules": {
                "@lwc/lwc-internal/no-global-node": "error",
                "prefer-rest-params": "off",
                "prefer-spread": "off"
            }
        },
        {
            "files": ["**/__tests__/**", "**/__mocks__/**", "packages/@lwc/integration-karma/**"],

            "env": {
                "jest": true,
                "es2021": true
            },

            "rules": {
                "jest/no-focused-tests": "error",
                "jest/valid-expect": "error",
                "jest/valid-expect-in-promise": "error"
            }
        },
        {
            "files": ["packages/@lwc/integration-tests/**"],

            "globals": {
                "$": true,
                "browser": true
            }
        },
        {
            "files": ["./*.js", "**/scripts/**", "jest.config.js"],

            "env": {
                "node": true,
                "jest": true
            },

            "rules": {
                "no-console": "off"
            }
        },
        {
            "files": ["packages/@lwc/perf-benchmarks/**"],

            "globals": {
                "after": true,
                "before": true,
                "benchmark": true,
                "run": true
            }
        },
        {
            "files": [
                "packages/@lwc/integration-tests/src/**/!(*.spec.js)",
                "packages/@lwc/integration-karma/test/**",
                "packages/@lwc/integration-karma/test-hydration/**"
            ],
            "rules": {
                "header/header": "off"
            }
        },
        {
            "files": [
                "packages/@lwc/integration-karma/**"
            ],
            "globals": {
                "lwcRuntimeFlags": true
            }
        },
        {
            // These files aren't JS files, but are directives used to selectively run test fixtures.
            // We use eslint to break CI if they are accidentally committed. Note that lint-staged
            // uses a different config to prevent them from being committed.
            "files": ["**/.only"],
            "extends": ["plugin:@typescript-eslint/disable-type-checked"],
            "rules": {
                "header/header": "off",
                "@lwc/lwc-internal/forbidden-filename": "error"
            }
        },
        {
            // These files aren't JS files, but are directives used to skip specific test fixtures.
            // We want to know if they've been accidentally committed, but not break CI, as we may
            // legitimately want to skip certain tests. Note that lint-staged uses a different config
            // to prevent them from being committed.
            "files": ["**/.skip"],
            "extends": ["plugin:@typescript-eslint/disable-type-checked"],
            "rules": {
                "header/header": "off",
                "@lwc/lwc-internal/forbidden-filename": "off"
            }
        }
    ]
}
