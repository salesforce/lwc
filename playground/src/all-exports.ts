// temp file so I can track all the exports - should be deleted before merging!

import * as index from 'lwc';
import * as babelPluginComponent from 'lwc/babel-plugin-component';
import babelPluginComponentDefault from 'lwc/babel-plugin-component';
import * as compiler from 'lwc/compiler';
import * as engineCore from 'lwc/engine-core';
import * as engineDom from 'lwc/engine-dom';
import * as engineServer from 'lwc/engine-server';
import * as errors from 'lwc/errors';
import * as features from 'lwc/features';
import featuresDefault from 'lwc/features';
import * as moduleResolver from 'lwc/module-resolver';
import * as rollupPlugin from 'lwc/rollup-plugin';
import rollupPluginDefault from 'lwc/rollup-plugin';
import * as shared from 'lwc/shared';
import * as styleCompiler from 'lwc/style-compiler';
import * as templateCompiler from 'lwc/template-compiler';
import templateCompilerDefault from 'lwc/template-compiler';
import * as wireService from 'lwc/wire-service';

// Polyfill packages - no exports
// import * as ariaReflection from 'lwc/aria-reflection';
// import * as syntheticShadow from 'lwc/synthetic-shadow';

index.HTMLElementTheGoodPart;
index.LightningElement;
index.api;
index.createContextProvider;
index.track;
index.wire;

type LwcBabelPluginOptions = babelPluginComponent.LwcBabelPluginOptions;
babelPluginComponent.default;
babelPluginComponentDefault;

type TransformResult = compiler.TransformResult;
compiler.transform;
compiler.transformSync;
compiler.version;

engineCore.getComponentHtmlPrototype;
type RenderMode = engineCore.RenderMode;
type ShadowMode = engineCore.ShadowMode;
engineCore.connectRootElement;
engineCore.createVM;
engineCore.disconnectRootElement;
engineCore.getAssociatedVMIfPresent;
engineCore.computeShadowAndRenderMode;
engineCore.runFormAssociatedCallback;
engineCore.runFormDisabledCallback;
engineCore.runFormResetCallback;
engineCore.runFormStateRestoreCallback;
engineCore.createContextProviderWithRegister;
engineCore.parseFragment;
engineCore.parseSVGFragment;
engineCore.hydrateRoot;
engineCore.registerComponent;
engineCore.getComponentAPIVersion;
engineCore.registerTemplate;
engineCore.registerDecorators;
engineCore.unwrap;
engineCore.sanitizeAttribute;
engineCore.getComponentDef;
engineCore.isComponentConstructor;
engineCore.__unstable__ProfilerControl;
engineCore.__unstable__ReportingControl;
engineCore.swapTemplate;
engineCore.swapComponent;
engineCore.swapStyle;
engineCore.setHooks;
engineCore.freezeTemplate;
engineCore.getComponentConstructor;
type RendererAPI = engineCore.RendererAPI;
type LifecycleCallback = engineCore.LifecycleCallback;
type WireConfigValue = engineCore.WireConfigValue;
type WireContextValue = engineCore.WireContextValue;
type DataCallback = engineCore.DataCallback;
type WireAdapter = engineCore.WireAdapter;
type WireAdapterConstructor = engineCore.WireAdapterConstructor;
type WireAdapterSchemaValue = engineCore.WireAdapterSchemaValue;
type WireContextSubscriptionPayload = engineCore.WireContextSubscriptionPayload;
type WireContextSubscriptionCallback = engineCore.WireContextSubscriptionCallback;
engineCore.LightningElement;
engineCore.api;
engineCore.track;
engineCore.wire;
engineCore.readonly;
engineCore.setFeatureFlag;
engineCore.setFeatureFlagForTest;

// NOTE: engine-dom re-exports a lot from engine-core, we can skip those items
engineDom.hydrateComponent;
engineDom.buildCustomElementConstructor;
engineDom.createElement;
engineDom.isNodeFromTemplate;
engineDom.LightningElement;
engineDom.renderer;
engineDom.rendererFactory;
engineDom.createContextProvider;

// NOTE: engine-server re-exports a lot from engine-core, we can skip those items
engineServer.renderComponent;
engineServer.LightningElement;
engineServer.renderer;
engineServer.createElement;
engineServer.createContextProvider;

type CompilerDiagnosticOrigin = errors.CompilerDiagnosticOrigin;
type CompilerDiagnostic = errors.CompilerDiagnostic;
type CompilerError = errors.CompilerError;
type ErrorConfig = errors.ErrorConfig;
type LWCErrorInfo = errors.LWCErrorInfo;
type Location = errors.Location;
type InstrumentationObject = errors.InstrumentationObject;
errors.generateErrorMessage;
errors.generateCompilerDiagnostic;
errors.generateCompilerError;
errors.invariant;
errors.normalizeToCompilerError;
errors.normalizeToDiagnostic;
errors.GENERIC_COMPILER_ERROR;
errors.CompilerValidationErrors;
errors.ModuleResolutionErrors;
errors.TransformerErrors;
errors.LWCClassErrors;
errors.DecoratorErrors;
errors.TemplateErrors;
errors.ParserDiagnostics;
errors.DiagnosticLevel;
errors.CompilerMetrics;
errors.CompilerError;

type FeatureFlagMap = features.FeatureFlagMap;
features.setFeatureFlag;
features.setFeatureFlagForTest;
features.runtimeFlags;
features.lwcRuntimeFlags;
features.default;
featuresDefault;

moduleResolver.resolveModule;
type ModuleResolverConfig = moduleResolver.ModuleResolverConfig;
type RegistryEntry = moduleResolver.RegistryEntry;
type RegistryType = moduleResolver.RegistryType;
type ModuleRecord = moduleResolver.ModuleRecord;
type AliasModuleRecord = moduleResolver.AliasModuleRecord;
type DirModuleRecord = moduleResolver.DirModuleRecord;
type NpmModuleRecord = moduleResolver.NpmModuleRecord;

type RollupLwcOptions = rollupPlugin.RollupLwcOptions;
rollupPlugin.default;
rollupPluginDefault;

type APIVersion = shared.APIVersion;
type APIFeature = shared.APIFeature;
type AccessibleElementProperties = shared.AccessibleElementProperties;
shared.LOWEST_API_VERSION;
shared.HIGHEST_API_VERSION;
shared.getAPIVersionFromNumber;
shared.isAPIFeatureEnabled;
shared.isAriaAttribute;
shared.ID_REFERENCING_ATTRIBUTES_SET;
shared.AriaAttrNameToPropNameMap;
shared.AriaPropNameToAttrNameMap;
shared.assert;
shared.assert.fail;
shared.assert.invariant;
shared.assert.isFalse;
shared.assert.isTrue;
shared.isBooleanAttribute;
shared.isGlobalHtmlAttribute;
shared.htmlPropertyToAttribute;
shared.kebabCaseToCamelCase;
shared.htmlEscape;
shared.KEY__SHADOW_RESOLVER;
shared.KEY__SHADOW_RESOLVER_PRIVATE;
shared.KEY__SHADOW_STATIC;
shared.KEY__SHADOW_STATIC_PRIVATE;
shared.KEY__SHADOW_TOKEN;
shared.KEY__SHADOW_STATIC_PRIVATE;
shared.KEY__LEGACY_SHADOW_TOKEN;
shared.KEY__LEGACY_SHADOW_TOKEN_PRIVATE;
shared.KEY__SYNTHETIC_MODE;
shared.KEY__SCOPED_CSS;
shared.KEY__NATIVE_GET_ELEMENT_BY_ID;
shared.KEY__NATIVE_QUERY_SELECTOR_ALL;
shared.isUndefined;
shared.isNull;
shared.isTrue;
shared.isFalse;
shared.isBoolean;
shared.isObject;
shared.isString;
shared.isNumber;
shared.noop;
shared.toString;
shared.getPropertyDescriptor;
shared.LWC_VERSION;
shared.LWC_VERSION_COMMENT;
shared.LWC_VERSION_COMMENT_REGEX;
shared.HTML_NAMESPACE;
shared.XML_NAMESPACE;
shared.SVG_NAMESPACE;
shared.MATHML_NAMESPACE;
shared.XLINK_NAMESPACE;
shared.isVoidElement;
// Language features
shared.ArrayConcat;
shared.ArrayFilter;
shared.ArrayFind;
shared.ArrayFindIndex;
shared.ArrayFill;
shared.ArrayIncludes;
shared.ArrayIndexOf;
shared.ArrayCopyWithin;
shared.ArrayJoin;
shared.ArrayMap;
shared.ArrayPop;
shared.ArrayPush;
shared.ArrayReduce;
shared.ArrayReverse;
shared.ArrayShift;
shared.ArraySlice;
shared.ArraySome;
shared.ArraySort;
shared.ArraySplice;
shared.ArrayUnshift;
shared.arrayEvery;
shared.assign;
shared.create;
shared.defineProperties;
shared.defineProperty;
shared.entries;
shared.forEach;
shared.freeze;
shared.getOwnPropertyDescriptor;
shared.getOwnPropertyDescriptors;
shared.getOwnPropertyNames;
shared.getPrototypeOf;
shared.hasOwnProperty;
shared.isArray;
shared.isFrozen;
shared.keys;
shared.seal;
shared.setPrototypeOf;
shared.StringCharCodeAt;
shared.StringReplace;
shared.StringSlice;
shared.StringSplit;
shared.StringToLowerCase;
shared.StringFromCharCode;

type StyleCompilerConfig = styleCompiler.Config;
styleCompiler.transform;

type CustomRendererConfig = templateCompiler.CustomRendererConfig;
type CustomRendererElementConfig = templateCompiler.CustomRendererElementConfig;
type TemplateCompilerConfig = templateCompiler.Config;
templateCompiler.parse;
templateCompiler.compile;
templateCompiler.default;
templateCompilerDefault;
type TemplateParseResult = templateCompiler.TemplateParseResult;
type TemplateCompileResult = templateCompiler.TemplateCompileResult;
type LWCDirectiveDomMode = templateCompiler.LWCDirectiveDomMode;
type LWCDirectiveRenderMode = templateCompiler.LWCDirectiveRenderMode;
type BaseNode = templateCompiler.BaseNode;
type SourceLocation = templateCompiler.SourceLocation;
type ElementSourceLocation = templateCompiler.ElementSourceLocation;
type Literal = templateCompiler.Literal;
type Identifier = templateCompiler.Identifier;
type MemberExpression = templateCompiler.MemberExpression;
type Expression = templateCompiler.Expression;
type ComplexExpression = templateCompiler.ComplexExpression;
type Attribute = templateCompiler.Attribute;
type Property = templateCompiler.Property;
type EventListener = templateCompiler.EventListener;
type Directive_any = templateCompiler.Directive<any>;
type KeyDirective = templateCompiler.KeyDirective;
type DynamicDirective = templateCompiler.DynamicDirective;
type IsDirective = templateCompiler.IsDirective;
type DomDirective = templateCompiler.DomDirective;
type SpreadDirective = templateCompiler.SpreadDirective;
type InnerHTMLDirective = templateCompiler.InnerHTMLDirective;
type RenderModeDirective = templateCompiler.RenderModeDirective;
type PreserveCommentsDirective = templateCompiler.PreserveCommentsDirective;
type RefDirective = templateCompiler.RefDirective;
type SlotBindDirective = templateCompiler.SlotBindDirective;
type SlotDataDirective = templateCompiler.SlotDataDirective;
type ElementDirective = templateCompiler.ElementDirective;
type RootDirective = templateCompiler.RootDirective;
type Text = templateCompiler.Text;
type Comment = templateCompiler.Comment;
type BaseParentNode = templateCompiler.BaseParentNode;
type AbstractBaseElement = templateCompiler.AbstractBaseElement;
type Element = templateCompiler.Element;
type StaticElement = templateCompiler.StaticElement;
type ExternalComponent = templateCompiler.ExternalComponent;
type Component = templateCompiler.Component;
type Slot = templateCompiler.Slot;
type BaseLwcElement_any = templateCompiler.BaseLwcElement<any>;
type LwcComponent = templateCompiler.LwcComponent;
type LwcTagName = templateCompiler.LwcTagName;
type BaseElement = templateCompiler.BaseElement;
type Root = templateCompiler.Root;
type TemplateDirectiveName = templateCompiler.TemplateDirectiveName;
type If = templateCompiler.If;
type IfBlock = templateCompiler.IfBlock;
type ElseifBlock = templateCompiler.ElseifBlock;
type ElseBlock = templateCompiler.ElseBlock;
type ForEach = templateCompiler.ForEach;
type ForOf = templateCompiler.ForOf;
type ScopedSlotFragment = templateCompiler.ScopedSlotFragment;
type ForBlock = templateCompiler.ForBlock;
type ParentNode = templateCompiler.ParentNode;
type ChildNode = templateCompiler.ChildNode;
type Node = templateCompiler.Node;
type ElementDirectiveName = templateCompiler.ElementDirectiveName;
type RootDirectiveName = templateCompiler.RootDirectiveName;

type WireEventTarget = wireService.WireEventTarget;
type ValueChangedEvent = wireService.ValueChangedEvent;
wireService.register;
wireService.registerWireService;
